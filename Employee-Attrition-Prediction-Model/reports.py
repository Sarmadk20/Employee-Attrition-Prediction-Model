import joblib
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib.backends.backend_pdf import PdfPages
from sklearn.preprocessing import LabelEncoder
from datetime import datetime
from sklearn.metrics import classification_report, confusion_matrix

# Global A4 size in inches (portrait)
A4_SIZE = (12, 9)

def generate_report(pdf_output='EDA_Report.pdf'):
    print("Starting report generation...")

    metrics = joblib.load('model_metrics.pkl')
    y_test = metrics['y_test']
    y_pred = metrics['y_pred']
    accuracy = metrics['accuracy']

    # Load data
    df = pd.read_csv('IBM_HR_Employee_Attrition.csv')
    label = LabelEncoder()
    df["Attrition"] = label.fit_transform(df.Attrition)

    categorical_cols = df.select_dtypes(include='object').columns
    df[categorical_cols] = df[categorical_cols].apply(LabelEncoder().fit_transform)

    with PdfPages('EDA_Report.pdf') as pdf:

        ### --- Title Page ---
        plt.figure(figsize=A4_SIZE)
        plt.axis('off')
        plt.text(0.5, 0.75, 'Employee Attrition Analysis Report', fontsize=24, ha='center', va='center')
        plt.text(0.5, 0.65, 'Generated by AIProject.py', fontsize=16, ha='center', va='center')
        plt.text(0.5, 0.55, f'Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', fontsize=12, ha='center', va='center')
        pdf.savefig()
        plt.close()

        ### --- Descriptive Statistics ---
        desc_stats = df.describe().transpose()
        fig, ax = plt.subplots(figsize=A4_SIZE)  # A4
        ax.axis('tight')
        ax.axis('off')
        table = ax.table(cellText=desc_stats.values.round(2),
                        colLabels=desc_stats.columns,
                        rowLabels=desc_stats.index,
                        loc='center',
                        cellLoc='center')
        table.auto_set_font_size(False)
        table.set_fontsize(8)
        table.scale(1.0, 1.5)
        ax.set_title('Descriptive Statistics', fontsize=14, pad=20)
        pdf.savefig()
        plt.close()

        # Visualization
        plt.figure(figsize=A4_SIZE)
        sns.histplot(data=df, x='DistanceFromHome', hue='Attrition', multiple='stack', bins=30)
        plt.title('Distance From Home by Attrition')
        plt.xlabel('Distance From Home')
        plt.ylabel('Employee Count')
        plt.tight_layout()
        pdf.savefig()
        plt.close()

        # Age histogram by Attrition
        plt.figure(figsize=A4_SIZE)
        sns.histplot(data=df, x='Age', hue='Attrition', multiple='stack', bins=30)
        plt.title('Age Distribution by Attrition')
        plt.xlabel('Age')
        plt.ylabel('Employee Count')
        plt.tight_layout()
        pdf.savefig()
        plt.close()

        # MonthlyIncome histogram by Attrition
        plt.figure(figsize=A4_SIZE)
        sns.histplot(data=df, x='MonthlyIncome', hue='Attrition', multiple='stack', bins=30)
        plt.title('Monthly Income by Attrition')
        plt.xlabel('Monthly Income')
        plt.ylabel('Employee Count')
        plt.tight_layout()
        pdf.savefig()
        plt.close()
        
        sns.histplot(data=df, x='Department')
        plt.title('Department')
        plt.xlabel('Sale')
        plt.ylabel('Research')
        plt.xticks(rotation=45)
        plt.tight_layout()
        pdf.savefig()
        plt.close()

        sns.histplot(data=df, x='JobRole')
        plt.title('Department')
        plt.xticks(rotation=45)
        plt.tight_layout()
        pdf.savefig()
        plt.close()

        plt.figure(figsize=(7,5))
        sns.heatmap(df.select_dtypes(include='number').corr(), annot=True, cmap="RdYlGn", annot_kws={"size":5})
        plt.tight_layout()
        plt.title('Correlation Heatmap')
        pdf.savefig()
        plt.close()

        report_dict = classification_report(y_test, y_pred, output_dict=True)
        report_df = pd.DataFrame(report_dict).transpose()

        # Select only these columns for display
        cols_to_show = ['precision', 'recall', 'f1-score', 'support']
        report_df = report_df[cols_to_show]

        # Round the floats
        report_df = report_df.round(2)

        # Plot as heatmap to look like a styled table
        plt.figure(figsize=(8, 6))  # Not full A4, looks better
        sns.heatmap(report_df.iloc[:-3], annot=True, fmt=".2f", cmap="YlGnBu", cbar=False, linewidths=0.5, linecolor='black')
        plt.title('Classification Report', fontsize=16)
        plt.yticks(rotation=0)  # Keep class labels horizontal
        plt.tight_layout()
        pdf.savefig()
        plt.close()

        cm = confusion_matrix(y_test, y_pred)
        plt.figure(figsize=(6, 5))
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
        plt.title('Confusion Matrix', fontsize=14)
        plt.xlabel('Predicted')
        plt.ylabel('Actual')
        plt.tight_layout()
        pdf.savefig()
        plt.close()

        # PAGE 1B: Summary page with only Accuracy
        fig, ax = plt.subplots(figsize=(8.27, 11.69))  # Full A4 page
        ax.axis('off')
        ax.text(0.5, 0.5, f"Overall Model Accuracy:\n\n{accuracy * 100:.2f}%", fontsize=24, ha='center', va='center')
        pdf.savefig(fig)
        plt.close()

    print(f"Report successfully saved as {pdf_output}")
